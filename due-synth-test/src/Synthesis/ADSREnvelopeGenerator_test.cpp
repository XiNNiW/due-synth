#include <gtest/gtest.h>
#include <Synthesis/ADSREnvelopeGenerator.h>

TEST(TestADSREnvelopeGenerator, initialized_with_attack_decay_sustain_release_in_millis) {
	float expectedAttackTime = 50.0f;
	float expectedDecayTime = 100.0f;
	float expectedSustainLevel = 0.5f;
	float expectedReleaseTime = 500.0f;

	ADSREnvelopeGenerator* envelope = new ADSREnvelopeGenerator(
			expectedAttackTime, expectedDecayTime, expectedSustainLevel,
			expectedReleaseTime);

	EXPECT_EQ(expectedAttackTime, envelope->attack);
	EXPECT_EQ(expectedDecayTime, envelope->decay);
	EXPECT_EQ(expectedSustainLevel, envelope->sustain);
	EXPECT_EQ(expectedReleaseTime, envelope->release);
	EXPECT_EQ(44100, envelope->sampleRate);

}
;

TEST(TestADSREnvelopeGenerator, advances_through_stages_when_started_and_stopped_CASE1) {

	const int numberOfAttackSamples = 45;
	float expectedAttackPhaseValues[numberOfAttackSamples] =
			{ 0, 0.02267573696, 0.04535147392, 0.06802721088, 0.09070294785,
					0.1133786848, 0.1360544218, 0.1587301587, 0.1814058957,
					0.2040816327, 0.2267573696, 0.2494331066, 0.2721088435,
					0.2947845805, 0.3174603175, 0.3401360544, 0.3628117914,
					0.3854875283, 0.4081632653, 0.4308390023, 0.4535147392,
					0.4761904762, 0.4988662132, 0.5215419501, 0.5442176871,
					0.566893424, 0.589569161, 0.612244898, 0.6349206349,
					0.6575963719, 0.6802721088, 0.7029478458, 0.7256235828,
					0.7482993197, 0.7709750567, 0.7936507937, 0.8163265306,
					0.8390022676, 0.8616780045, 0.8843537415, 0.9070294785,
					0.9297052154, 0.9523809524, 0.9750566893, 0.9977324263 };

	const int numberOfDecaySamples = 45;
	float expectedDecayValues[45] =
			{ 1, 0.9886621315, 0.977324263, 0.9659863946, 0.9546485261,
					0.9433106576, 0.9319727891, 0.9206349206, 0.9092970522,
					0.8979591837, 0.8866213152, 0.8752834467, 0.8639455782,
					0.8526077098, 0.8412698413, 0.8299319728, 0.8185941043,
					0.8072562358, 0.7959183673, 0.7845804989, 0.7732426304,
					0.7619047619, 0.7505668934, 0.7392290249, 0.7278911565,
					0.716553288, 0.7052154195, 0.693877551, 0.6825396825,
					0.6712018141, 0.6598639456, 0.6485260771, 0.6371882086,
					0.6258503401, 0.6145124717, 0.6031746032, 0.5918367347,
					0.5804988662, 0.5691609977, 0.5578231293, 0.5464852608,
					0.5351473923, 0.5238095238, 0.5124716553, 0.5011337868 };
	const int numberOfReleaseSamples = 89;
	float expectedReleaseValues[numberOfReleaseSamples] = { 0.5, 0.4943310658,
			0.4886621315, 0.4829931973, 0.477324263, 0.4716553288, 0.4659863946,
			0.4603174603, 0.4546485261, 0.4489795918, 0.4433106576,
			0.4376417234, 0.4319727891, 0.4263038549, 0.4206349206,
			0.4149659864, 0.4092970522, 0.4036281179, 0.3979591837,
			0.3922902494, 0.3866213152, 0.380952381, 0.3752834467, 0.3696145125,
			0.3639455782, 0.358276644, 0.3526077098, 0.3469387755, 0.3412698413,
			0.335600907, 0.3299319728, 0.3242630385, 0.3185941043, 0.3129251701,
			0.3072562358, 0.3015873016, 0.2959183673, 0.2902494331,
			0.2845804989, 0.2789115646, 0.2732426304, 0.2675736961,
			0.2619047619, 0.2562358277, 0.2505668934, 0.2448979592,
			0.2392290249, 0.2335600907, 0.2278911565, 0.2222222222, 0.216553288,
			0.2108843537, 0.2052154195, 0.1995464853, 0.193877551, 0.1882086168,
			0.1825396825, 0.1768707483, 0.1712018141, 0.1655328798,
			0.1598639456, 0.1541950113, 0.1485260771, 0.1428571429,
			0.1371882086, 0.1315192744, 0.1258503401, 0.1201814059,
			0.1145124717, 0.1088435374, 0.1031746032, 0.09750566893,
			0.09183673469, 0.08616780045, 0.08049886621, 0.07482993197,
			0.06916099773, 0.06349206349, 0.05782312925, 0.05215419501,
			0.04648526077, 0.04081632653, 0.03514739229, 0.02947845805,
			0.02380952381, 0.01814058957, 0.01247165533, 0.006802721088,
			0.001133786848 };

	float expectedAttackTime = 1.0f;
	float expectedDecayTime = 1.0f;
	float expectedSustainLevel = 0.5f;
	float expectedReleaseTime = 2.0f;

	ADSREnvelopeGenerator* envelope = new ADSREnvelopeGenerator(
			expectedAttackTime, expectedDecayTime, expectedSustainLevel,
			expectedReleaseTime);

	EXPECT_EQ(expectedAttackTime, envelope->attack);
	EXPECT_EQ(expectedDecayTime, envelope->decay);
	EXPECT_EQ(expectedSustainLevel, envelope->sustain);
	EXPECT_EQ(expectedReleaseTime, envelope->release);

	envelope->start();
	for (int index = 0; index < numberOfAttackSamples; index++) {
		EXPECT_FLOAT_EQ(expectedAttackPhaseValues[index], envelope->advance());
	}

	for (int index = 0; index < numberOfDecaySamples; index++) {
		EXPECT_FLOAT_EQ(expectedDecayValues[index], envelope->advance());
	}

	EXPECT_FLOAT_EQ(0.5f, envelope->advance());
	EXPECT_FLOAT_EQ(0.5f, envelope->advance());
	EXPECT_FLOAT_EQ(0.5f, envelope->advance());
	EXPECT_FLOAT_EQ(0.5f, envelope->advance());

	envelope->stop();

	for (int index = 0; index < numberOfReleaseSamples; index++) {
		EXPECT_NEAR(expectedReleaseValues[index], envelope->advance(),0.01f);
	}
	EXPECT_FLOAT_EQ(0.0f, envelope->advance());

};

TEST(TestADSREnvelopeGenerator, advances_through_stages_when_started_and_stopped_CASE2) {

	const int numberOfAttackSamples = 309;
	float expectedAttackValues[numberOfAttackSamples] = { 0, 0.003239390994,
			0.006478781989, 0.009718172983, 0.01295756398, 0.01619695497,
			0.01943634597, 0.02267573696, 0.02591512796, 0.02915451895,
			0.03239390994, 0.03563330094, 0.03887269193, 0.04211208293,
			0.04535147392, 0.04859086492, 0.05183025591, 0.05506964691,
			0.0583090379, 0.0615484289, 0.06478781989, 0.06802721088,
			0.07126660188, 0.07450599287, 0.07774538387, 0.08098477486,
			0.08422416586, 0.08746355685, 0.09070294785, 0.09394233884,
			0.09718172983, 0.1004211208, 0.1036605118, 0.1068999028,
			0.1101392938, 0.1133786848, 0.1166180758, 0.1198574668,
			0.1230968578, 0.1263362488, 0.1295756398, 0.1328150308,
			0.1360544218, 0.1392938128, 0.1425332038, 0.1457725948,
			0.1490119857, 0.1522513767, 0.1554907677, 0.1587301587,
			0.1619695497, 0.1652089407, 0.1684483317, 0.1716877227,
			0.1749271137, 0.1781665047, 0.1814058957, 0.1846452867,
			0.1878846777, 0.1911240687, 0.1943634597, 0.1976028507,
			0.2008422417, 0.2040816327, 0.2073210236, 0.2105604146,
			0.2137998056, 0.2170391966, 0.2202785876, 0.2235179786,
			0.2267573696, 0.2299967606, 0.2332361516, 0.2364755426,
			0.2397149336, 0.2429543246, 0.2461937156, 0.2494331066,
			0.2526724976, 0.2559118886, 0.2591512796, 0.2623906706,
			0.2656300615, 0.2688694525, 0.2721088435, 0.2753482345,
			0.2785876255, 0.2818270165, 0.2850664075, 0.2883057985,
			0.2915451895, 0.2947845805, 0.2980239715, 0.3012633625,
			0.3045027535, 0.3077421445, 0.3109815355, 0.3142209265,
			0.3174603175, 0.3206997085, 0.3239390994, 0.3271784904,
			0.3304178814, 0.3336572724, 0.3368966634, 0.3401360544,
			0.3433754454, 0.3466148364, 0.3498542274, 0.3530936184,
			0.3563330094, 0.3595724004, 0.3628117914, 0.3660511824,
			0.3692905734, 0.3725299644, 0.3757693554, 0.3790087464,
			0.3822481374, 0.3854875283, 0.3887269193, 0.3919663103,
			0.3952057013, 0.3984450923, 0.4016844833, 0.4049238743,
			0.4081632653, 0.4114026563, 0.4146420473, 0.4178814383,
			0.4211208293, 0.4243602203, 0.4275996113, 0.4308390023,
			0.4340783933, 0.4373177843, 0.4405571753, 0.4437965662,
			0.4470359572, 0.4502753482, 0.4535147392, 0.4567541302,
			0.4599935212, 0.4632329122, 0.4664723032, 0.4697116942,
			0.4729510852, 0.4761904762, 0.4794298672, 0.4826692582,
			0.4859086492, 0.4891480402, 0.4923874312, 0.4956268222,
			0.4988662132, 0.5021056041, 0.5053449951, 0.5085843861,
			0.5118237771, 0.5150631681, 0.5183025591, 0.5215419501,
			0.5247813411, 0.5280207321, 0.5312601231, 0.5344995141,
			0.5377389051, 0.5409782961, 0.5442176871, 0.5474570781,
			0.5506964691, 0.5539358601, 0.5571752511, 0.560414642, 0.563654033,
			0.566893424, 0.570132815, 0.573372206, 0.576611597, 0.579850988,
			0.583090379, 0.58632977, 0.589569161, 0.592808552, 0.596047943,
			0.599287334, 0.602526725, 0.605766116, 0.609005507, 0.612244898,
			0.615484289, 0.6187236799, 0.6219630709, 0.6252024619, 0.6284418529,
			0.6316812439, 0.6349206349, 0.6381600259, 0.6413994169,
			0.6446388079, 0.6478781989, 0.6511175899, 0.6543569809,
			0.6575963719, 0.6608357629, 0.6640751539, 0.6673145449,
			0.6705539359, 0.6737933269, 0.6770327178, 0.6802721088,
			0.6835114998, 0.6867508908, 0.6899902818, 0.6932296728,
			0.6964690638, 0.6997084548, 0.7029478458, 0.7061872368,
			0.7094266278, 0.7126660188, 0.7159054098, 0.7191448008,
			0.7223841918, 0.7256235828, 0.7288629738, 0.7321023648,
			0.7353417557, 0.7385811467, 0.7418205377, 0.7450599287,
			0.7482993197, 0.7515387107, 0.7547781017, 0.7580174927,
			0.7612568837, 0.7644962747, 0.7677356657, 0.7709750567,
			0.7742144477, 0.7774538387, 0.7806932297, 0.7839326207,
			0.7871720117, 0.7904114027, 0.7936507937, 0.7968901846,
			0.8001295756, 0.8033689666, 0.8066083576, 0.8098477486,
			0.8130871396, 0.8163265306, 0.8195659216, 0.8228053126,
			0.8260447036, 0.8292840946, 0.8325234856, 0.8357628766,
			0.8390022676, 0.8422416586, 0.8454810496, 0.8487204406,
			0.8519598316, 0.8551992225, 0.8584386135, 0.8616780045,
			0.8649173955, 0.8681567865, 0.8713961775, 0.8746355685,
			0.8778749595, 0.8811143505, 0.8843537415, 0.8875931325,
			0.8908325235, 0.8940719145, 0.8973113055, 0.9005506965,
			0.9037900875, 0.9070294785, 0.9102688695, 0.9135082604,
			0.9167476514, 0.9199870424, 0.9232264334, 0.9264658244,
			0.9297052154, 0.9329446064, 0.9361839974, 0.9394233884,
			0.9426627794, 0.9459021704, 0.9491415614, 0.9523809524,
			0.9556203434, 0.9588597344, 0.9620991254, 0.9653385164,
			0.9685779074, 0.9718172983, 0.9750566893, 0.9782960803,
			0.9815354713, 0.9847748623, 0.9880142533, 0.9912536443,
			0.9944930353, 0.9977324263 };

	const int numberOfDecaySamples = 89;
	float expectedDecayValues[numberOfDecaySamples] = { 1, 0.9965986395,
			0.9931972789, 0.9897959184, 0.9863945578, 0.9829931973,
			0.9795918367, 0.9761904762, 0.9727891156, 0.9693877551,
			0.9659863946, 0.962585034, 0.9591836735, 0.9557823129, 0.9523809524,
			0.9489795918, 0.9455782313, 0.9421768707, 0.9387755102,
			0.9353741497, 0.9319727891, 0.9285714286, 0.925170068, 0.9217687075,
			0.9183673469, 0.9149659864, 0.9115646259, 0.9081632653,
			0.9047619048, 0.9013605442, 0.8979591837, 0.8945578231,
			0.8911564626, 0.887755102, 0.8843537415, 0.880952381, 0.8775510204,
			0.8741496599, 0.8707482993, 0.8673469388, 0.8639455782,
			0.8605442177, 0.8571428571, 0.8537414966, 0.8503401361,
			0.8469387755, 0.843537415, 0.8401360544, 0.8367346939, 0.8333333333,
			0.8299319728, 0.8265306122, 0.8231292517, 0.8197278912,
			0.8163265306, 0.8129251701, 0.8095238095, 0.806122449, 0.8027210884,
			0.7993197279, 0.7959183673, 0.7925170068, 0.7891156463,
			0.7857142857, 0.7823129252, 0.7789115646, 0.7755102041,
			0.7721088435, 0.768707483, 0.7653061224, 0.7619047619, 0.7585034014,
			0.7551020408, 0.7517006803, 0.7482993197, 0.7448979592,
			0.7414965986, 0.7380952381, 0.7346938776, 0.731292517, 0.7278911565,
			0.7244897959, 0.7210884354, 0.7176870748, 0.7142857143,
			0.7108843537, 0.7074829932, 0.7040816327, 0.7006802721 };

	const int numberOfReleaseSamples = 89;
	float expectedReleaseValues[numberOfReleaseSamples] = { 0.7, 0.6841269841,
			0.6682539683, 0.6523809524, 0.6365079365, 0.6206349206,
			0.6047619048, 0.5888888889, 0.573015873, 0.5571428571, 0.5412698413,
			0.5253968254, 0.5095238095, 0.4936507937, 0.4777777778,
			0.4619047619, 0.446031746, 0.4301587302, 0.4142857143, 0.3984126984,
			0.3825396825, 0.3666666667, 0.3507936508, 0.3349206349, 0.319047619,
			0.3031746032, 0.2873015873, 0.2714285714, 0.2555555556,
			0.2396825397, 0.2238095238, 0.2079365079, 0.1920634921,
			0.1761904762, 0.1603174603, 0.1444444444, 0.1285714286,
			0.1126984127, 0.09682539683, 0.08095238095, 0.06507936508,
			0.04920634921, 0.03333333333, 0.01746031746, 0.001587301587 };

	float expectedAttackTime = 7.0f;
	float expectedDecayTime = 2.0f;
	float expectedSustainLevel = 0.7f;
	float expectedReleaseTime = 1.0f;

	ADSREnvelopeGenerator* envelope = new ADSREnvelopeGenerator(
			expectedAttackTime, expectedDecayTime, expectedSustainLevel,
			expectedReleaseTime);

	EXPECT_EQ(expectedAttackTime, envelope->attack);
	EXPECT_EQ(expectedDecayTime, envelope->decay);
	EXPECT_EQ(expectedSustainLevel, envelope->sustain);
	EXPECT_EQ(expectedReleaseTime, envelope->release);

	envelope->start();

	for (int index = 0; index < numberOfAttackSamples; index++) {
		EXPECT_FLOAT_EQ(expectedAttackValues[index], envelope->advance());
	}

	for (int index = 0; index < numberOfDecaySamples; index++) {
		EXPECT_FLOAT_EQ(expectedDecayValues[index], envelope->advance());
	}

	EXPECT_FLOAT_EQ(0.7f, envelope->advance());
	EXPECT_FLOAT_EQ(0.7f, envelope->advance());
	EXPECT_FLOAT_EQ(0.7f, envelope->advance());
	EXPECT_FLOAT_EQ(0.7f, envelope->advance());

	envelope->stop();

	for (int index = 0; index < numberOfReleaseSamples; index++) {
		printf("%d index\n", index);
		EXPECT_NEAR(expectedReleaseValues[index], envelope->advance(), 0.01f);
	}

	EXPECT_FLOAT_EQ(0.0f, envelope->advance());

}
;

